Хуки доступны в версии React 16.8

Функциональное программирование.
Название всегда с use.
Простота для программиста и js, менее громоздкий код компонента, нет наследование всего функционала.

+ useState
Асинхронный, особая работа при передаче объекта и при передаче функции в начальное значение.
+ useEffect
Работа с жизненным циклом в функциональном компоненте. Асинхронный
+ useLayoutEffect
Аналог componentDidMount или синхронный useEffect

+ useContext
Создание и использование общего для группы компонентов объекта.
+ useReducer
Альтернатива Reducer в redux
+ useCallback
Кеширование функций(функция не изменятся при новом вызове), возвращает функцию. Нужно для предотвращения рекурсивных вызовов.
+ useMemo
Кеширование вычислений и объектов, возвращает результат функции. React.memo - это HOC проверяющий пропсы, если совпали с предыдущими,
рендерит ссылку на прошлый компонент иначе запускает рендер компонента по новой.
+ useRef
Хранит ссылки и значения не вызывая рендер. createRef всегда будет создавать новую ссылку,
useRef один раз при первом рендере.

- useImperativeHandle
Дает контроль над возвращаемым значением. Вместо того, чтобы возвращать экземпляр элемент,
явно указывается, каким будет возвращаемое значение.
Позволяет заменять функции(такие как размытие, фокусировка и т. д.) своими функциями,
тем самым допуская побочные эффекты нормального поведения или вообще другое поведение. Можете называть функцию как угодно.
- useDebugValue
Вызывается только тогда, когда React DevTools открыт и соответствующий хук проверяется, что предотвращает какое-либо влияние на производительность.
Можно использовать для отображения метки пользовательских хуков в React DevTools.
- useDeferredValue
Оборачиваете не код обновления состояния, а значение. В результате React будет выполнять другие обновления состояния
или пользовательского интерфейса с более высоким приоритетом, чем обновления, связанные с обёрнутым значением.
- useTransition
Можно использовать, чтобы сообщить React, что определенные обновления состояния имеют более низкий приоритет
- useId
- useEvent